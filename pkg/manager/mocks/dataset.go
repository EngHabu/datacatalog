// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import datacatalog "github.com/lyft/flyteidl/gen/pb-go/flyteidl/datacatalog"

import mock "github.com/stretchr/testify/mock"

// DatasetManager is an autogenerated mock type for the DatasetManager type
type DatasetManager struct {
	mock.Mock
}

// CreateDataset provides a mock function with given fields: ctx, request
func (_m *DatasetManager) CreateDataset(ctx context.Context, request datacatalog.CreateDatasetRequest) (*datacatalog.CreateDatasetResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *datacatalog.CreateDatasetResponse
	if rf, ok := ret.Get(0).(func(context.Context, datacatalog.CreateDatasetRequest) *datacatalog.CreateDatasetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.CreateDatasetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datacatalog.CreateDatasetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataset provides a mock function with given fields: ctx, request
func (_m *DatasetManager) GetDataset(ctx context.Context, request datacatalog.GetDatasetRequest) (*datacatalog.GetDatasetResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *datacatalog.GetDatasetResponse
	if rf, ok := ret.Get(0).(func(context.Context, datacatalog.GetDatasetRequest) *datacatalog.GetDatasetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.GetDatasetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datacatalog.GetDatasetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
